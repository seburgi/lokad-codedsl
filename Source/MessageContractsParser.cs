//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g 2013-03-27 09:44:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  MessageContracts 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class MessageContractsParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BlockToken", "CLASS", "COMMENT", "CONST", "ClassToken", "CommandToken", "DisctionaryToken", "ESC_SEQ", "EXPLICIT", "EXTERN", "EntityDefinition", "EventToken", "ExternToken", "FragmentEntry", "FragmentGroup", "FragmentReference", "HEX_DIGIT", "ID", "IF", "INT", "INTERFACE", "MemberToken", "Modifier", "ModifierDefinition", "NAMESPACE", "NamespaceToken", "OCTAL_ESC", "STRING", "StringRepresentationToken", "TemplateToken", "TypeToken", "UNICODE_ESC", "USING", "UsingToken", "WS", "'('", "')'", "','", "'.'", "';'", "'='", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int BlockToken=4;
	public const int CLASS=5;
	public const int COMMENT=6;
	public const int CONST=7;
	public const int ClassToken=8;
	public const int CommandToken=9;
	public const int DisctionaryToken=10;
	public const int ESC_SEQ=11;
	public const int EXPLICIT=12;
	public const int EXTERN=13;
	public const int EntityDefinition=14;
	public const int EventToken=15;
	public const int ExternToken=16;
	public const int FragmentEntry=17;
	public const int FragmentGroup=18;
	public const int FragmentReference=19;
	public const int HEX_DIGIT=20;
	public const int ID=21;
	public const int IF=22;
	public const int INT=23;
	public const int INTERFACE=24;
	public const int MemberToken=25;
	public const int Modifier=26;
	public const int ModifierDefinition=27;
	public const int NAMESPACE=28;
	public const int NamespaceToken=29;
	public const int OCTAL_ESC=30;
	public const int STRING=31;
	public const int StringRepresentationToken=32;
	public const int TemplateToken=33;
	public const int TypeToken=34;
	public const int UNICODE_ESC=35;
	public const int USING=36;
	public const int UsingToken=37;
	public const int WS=38;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public MessageContractsParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public MessageContractsParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return MessageContractsParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:33:1: program : ( declaration )+ ;
	[GrammarRule("program")]
	private AstParserRuleReturnScope<object, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> declaration1 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(33, 1);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:34:2: ( ( declaration )+ )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:34:4: ( declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:34:4: ( declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_0 = input.LA(1);

				if ((LA1_0==CLASS||LA1_0==CONST||LA1_0==EXTERN||(LA1_0>=ID && LA1_0<=IF)||LA1_0==INTERFACE||LA1_0==NAMESPACE||LA1_0==USING))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:34:4: declaration
					{
					DebugLocation(34, 4);
					PushFollow(Follow._declaration_in_program125);
					declaration1=declaration();
					PopFollow();

					adaptor.AddChild(root_0, declaration1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:37:1: declaration : ( modifier_declaration | frag_declaration | type_declaration | entity_declaration | namespace_declaration | extern_declaration | template_declaration | using_declaration | class_declaration );
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 2);
		TraceIn("declaration", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier_declaration2 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> frag_declaration3 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_declaration4 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> entity_declaration5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> namespace_declaration6 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> extern_declaration7 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> template_declaration8 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> using_declaration9 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> class_declaration10 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(37, 1);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:38:2: ( modifier_declaration | frag_declaration | type_declaration | entity_declaration | namespace_declaration | extern_declaration | template_declaration | using_declaration | class_declaration )
			int alt2=9;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			switch (input.LA(1))
			{
			case IF:
				{
				alt2 = 1;
				}
				break;
			case CONST:
				{
				alt2 = 2;
				}
				break;
			case ID:
				{
				int LA2_3 = input.LA(2);

				if ((LA2_3==44))
				{
					alt2 = 7;
				}
				else if ((LA2_3==Modifier||LA2_3==39))
				{
					alt2 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTERFACE:
				{
				alt2 = 4;
				}
				break;
			case NAMESPACE:
				{
				alt2 = 5;
				}
				break;
			case EXTERN:
				{
				alt2 = 6;
				}
				break;
			case USING:
				{
				alt2 = 8;
				}
				break;
			case CLASS:
				{
				alt2 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:38:4: modifier_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(38, 4);
				PushFollow(Follow._modifier_declaration_in_declaration138);
				modifier_declaration2=modifier_declaration();
				PopFollow();

				adaptor.AddChild(root_0, modifier_declaration2.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:39:4: frag_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(39, 4);
				PushFollow(Follow._frag_declaration_in_declaration143);
				frag_declaration3=frag_declaration();
				PopFollow();

				adaptor.AddChild(root_0, frag_declaration3.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:40:4: type_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(40, 4);
				PushFollow(Follow._type_declaration_in_declaration148);
				type_declaration4=type_declaration();
				PopFollow();

				adaptor.AddChild(root_0, type_declaration4.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:41:4: entity_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(41, 4);
				PushFollow(Follow._entity_declaration_in_declaration153);
				entity_declaration5=entity_declaration();
				PopFollow();

				adaptor.AddChild(root_0, entity_declaration5.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:42:4: namespace_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(42, 4);
				PushFollow(Follow._namespace_declaration_in_declaration158);
				namespace_declaration6=namespace_declaration();
				PopFollow();

				adaptor.AddChild(root_0, namespace_declaration6.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:43:4: extern_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(43, 4);
				PushFollow(Follow._extern_declaration_in_declaration164);
				extern_declaration7=extern_declaration();
				PopFollow();

				adaptor.AddChild(root_0, extern_declaration7.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:44:4: template_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(44, 4);
				PushFollow(Follow._template_declaration_in_declaration169);
				template_declaration8=template_declaration();
				PopFollow();

				adaptor.AddChild(root_0, template_declaration8.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:45:4: using_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(45, 4);
				PushFollow(Follow._using_declaration_in_declaration174);
				using_declaration9=using_declaration();
				PopFollow();

				adaptor.AddChild(root_0, using_declaration9.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:46:4: class_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(46, 4);
				PushFollow(Follow._class_declaration_in_declaration179);
				class_declaration10=class_declaration();
				PopFollow();

				adaptor.AddChild(root_0, class_declaration10.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 2);
			LeaveRule("declaration", 2);
			LeaveRule_declaration();
	    }
	 	DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_declaration() {}

	// $ANTLR start "namespace_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:49:1: namespace_declaration : NAMESPACE ( ID ( '.' ID )* ) ';' -> ^( NamespaceToken ( ID )* ) ;
	[GrammarRule("namespace_declaration")]
	private AstParserRuleReturnScope<object, IToken> namespace_declaration()
	{
		EnterRule_namespace_declaration();
		EnterRule("namespace_declaration", 3);
		TraceIn("namespace_declaration", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NAMESPACE11 = default(IToken);
	    IToken ID12 = default(IToken);
	    IToken char_literal13 = default(IToken);
	    IToken ID14 = default(IToken);
	    IToken char_literal15 = default(IToken);

	    object NAMESPACE11_tree = default(object);
	    object ID12_tree = default(object);
	    object char_literal13_tree = default(object);
	    object ID14_tree = default(object);
	    object char_literal15_tree = default(object);
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_NAMESPACE=new RewriteRuleITokenStream(adaptor,"token NAMESPACE");

		try { DebugEnterRule(GrammarFileName, "namespace_declaration");
		DebugLocation(49, 28);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:50:5: ( NAMESPACE ( ID ( '.' ID )* ) ';' -> ^( NamespaceToken ( ID )* ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:50:7: NAMESPACE ( ID ( '.' ID )* ) ';'
			{
			DebugLocation(50, 7);
			NAMESPACE11=(IToken)Match(input,NAMESPACE,Follow._NAMESPACE_in_namespace_declaration193);  
			stream_NAMESPACE.Add(NAMESPACE11);

			DebugLocation(50, 17);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:50:17: ( ID ( '.' ID )* )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:50:18: ID ( '.' ID )*
			{
			DebugLocation(50, 18);
			ID12=(IToken)Match(input,ID,Follow._ID_in_namespace_declaration196);  
			stream_ID.Add(ID12);

			DebugLocation(50, 21);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:50:21: ( '.' ID )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_0 = input.LA(1);

				if ((LA3_0==42))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:50:22: '.' ID
					{
					DebugLocation(50, 22);
					char_literal13=(IToken)Match(input,42,Follow._42_in_namespace_declaration199);  
					stream_42.Add(char_literal13);

					DebugLocation(50, 26);
					ID14=(IToken)Match(input,ID,Follow._ID_in_namespace_declaration201);  
					stream_ID.Add(ID14);


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			DebugLocation(50, 32);
			char_literal15=(IToken)Match(input,43,Follow._43_in_namespace_declaration206);  
			stream_43.Add(char_literal15);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 51:5: -> ^( NamespaceToken ( ID )* )
			{
				DebugLocation(51, 8);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:51:8: ^( NamespaceToken ( ID )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(51, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NamespaceToken, "NamespaceToken"), root_1);

				DebugLocation(51, 25);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:51:25: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(51, 25);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_declaration", 3);
			LeaveRule("namespace_declaration", 3);
			LeaveRule_namespace_declaration();
	    }
	 	DebugLocation(51, 28);
		} finally { DebugExitRule(GrammarFileName, "namespace_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_using_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_using_declaration() {}

	// $ANTLR start "using_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:53:1: using_declaration : USING ( ID ( '.' ID )* ) ';' -> ^( UsingToken ( ID )* ) ;
	[GrammarRule("using_declaration")]
	private AstParserRuleReturnScope<object, IToken> using_declaration()
	{
		EnterRule_using_declaration();
		EnterRule("using_declaration", 4);
		TraceIn("using_declaration", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USING16 = default(IToken);
	    IToken ID17 = default(IToken);
	    IToken char_literal18 = default(IToken);
	    IToken ID19 = default(IToken);
	    IToken char_literal20 = default(IToken);

	    object USING16_tree = default(object);
	    object ID17_tree = default(object);
	    object char_literal18_tree = default(object);
	    object ID19_tree = default(object);
	    object char_literal20_tree = default(object);
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
	    RewriteRuleITokenStream stream_USING=new RewriteRuleITokenStream(adaptor,"token USING");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");

		try { DebugEnterRule(GrammarFileName, "using_declaration");
		DebugLocation(53, 24);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:54:5: ( USING ( ID ( '.' ID )* ) ';' -> ^( UsingToken ( ID )* ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:54:7: USING ( ID ( '.' ID )* ) ';'
			{
			DebugLocation(54, 7);
			USING16=(IToken)Match(input,USING,Follow._USING_in_using_declaration236);  
			stream_USING.Add(USING16);

			DebugLocation(54, 13);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:54:13: ( ID ( '.' ID )* )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:54:14: ID ( '.' ID )*
			{
			DebugLocation(54, 14);
			ID17=(IToken)Match(input,ID,Follow._ID_in_using_declaration239);  
			stream_ID.Add(ID17);

			DebugLocation(54, 17);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:54:17: ( '.' ID )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_0 = input.LA(1);

				if ((LA4_0==42))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:54:18: '.' ID
					{
					DebugLocation(54, 18);
					char_literal18=(IToken)Match(input,42,Follow._42_in_using_declaration242);  
					stream_42.Add(char_literal18);

					DebugLocation(54, 22);
					ID19=(IToken)Match(input,ID,Follow._ID_in_using_declaration244);  
					stream_ID.Add(ID19);


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			DebugLocation(54, 28);
			char_literal20=(IToken)Match(input,43,Follow._43_in_using_declaration249);  
			stream_43.Add(char_literal20);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 55:5: -> ^( UsingToken ( ID )* )
			{
				DebugLocation(55, 8);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:55:8: ^( UsingToken ( ID )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(55, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UsingToken, "UsingToken"), root_1);

				DebugLocation(55, 21);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:55:21: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(55, 21);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_declaration", 4);
			LeaveRule("using_declaration", 4);
			LeaveRule_using_declaration();
	    }
	 	DebugLocation(55, 24);
		} finally { DebugExitRule(GrammarFileName, "using_declaration"); }
		return retval;

	}
	// $ANTLR end "using_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_frag_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_frag_declaration() {}

	// $ANTLR start "frag_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:58:1: frag_declaration : CONST ID '=' ID ID ';' -> ^( FragmentEntry ID ID ID ) ;
	[GrammarRule("frag_declaration")]
	private AstParserRuleReturnScope<object, IToken> frag_declaration()
	{
		EnterRule_frag_declaration();
		EnterRule("frag_declaration", 5);
		TraceIn("frag_declaration", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONST21 = default(IToken);
	    IToken ID22 = default(IToken);
	    IToken char_literal23 = default(IToken);
	    IToken ID24 = default(IToken);
	    IToken ID25 = default(IToken);
	    IToken char_literal26 = default(IToken);

	    object CONST21_tree = default(object);
	    object ID22_tree = default(object);
	    object char_literal23_tree = default(object);
	    object ID24_tree = default(object);
	    object ID25_tree = default(object);
	    object char_literal26_tree = default(object);
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_CONST=new RewriteRuleITokenStream(adaptor,"token CONST");

		try { DebugEnterRule(GrammarFileName, "frag_declaration");
		DebugLocation(58, 54);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:59:2: ( CONST ID '=' ID ID ';' -> ^( FragmentEntry ID ID ID ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:59:4: CONST ID '=' ID ID ';'
			{
			DebugLocation(59, 4);
			CONST21=(IToken)Match(input,CONST,Follow._CONST_in_frag_declaration273);  
			stream_CONST.Add(CONST21);

			DebugLocation(59, 10);
			ID22=(IToken)Match(input,ID,Follow._ID_in_frag_declaration275);  
			stream_ID.Add(ID22);

			DebugLocation(59, 13);
			char_literal23=(IToken)Match(input,44,Follow._44_in_frag_declaration277);  
			stream_44.Add(char_literal23);

			DebugLocation(59, 17);
			ID24=(IToken)Match(input,ID,Follow._ID_in_frag_declaration279);  
			stream_ID.Add(ID24);

			DebugLocation(59, 20);
			ID25=(IToken)Match(input,ID,Follow._ID_in_frag_declaration281);  
			stream_ID.Add(ID25);

			DebugLocation(59, 23);
			char_literal26=(IToken)Match(input,43,Follow._43_in_frag_declaration283);  
			stream_43.Add(char_literal26);



			{
			// AST REWRITE
			// elements: ID, ID, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 59:27: -> ^( FragmentEntry ID ID ID )
			{
				DebugLocation(59, 30);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:59:30: ^( FragmentEntry ID ID ID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(59, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FragmentEntry, "FragmentEntry"), root_1);

				DebugLocation(59, 46);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(59, 49);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(59, 52);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("frag_declaration", 5);
			LeaveRule("frag_declaration", 5);
			LeaveRule_frag_declaration();
	    }
	 	DebugLocation(59, 54);
		} finally { DebugExitRule(GrammarFileName, "frag_declaration"); }
		return retval;

	}
	// $ANTLR end "frag_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modifier_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modifier_declaration() {}

	// $ANTLR start "modifier_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:61:1: modifier_declaration : IF Modifier '=' ID ( ',' ID )* ';' -> ^( ModifierDefinition Modifier ( ID )* ) ;
	[GrammarRule("modifier_declaration")]
	private AstParserRuleReturnScope<object, IToken> modifier_declaration()
	{
		EnterRule_modifier_declaration();
		EnterRule("modifier_declaration", 6);
		TraceIn("modifier_declaration", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken IF27 = default(IToken);
	    IToken Modifier28 = default(IToken);
	    IToken char_literal29 = default(IToken);
	    IToken ID30 = default(IToken);
	    IToken char_literal31 = default(IToken);
	    IToken ID32 = default(IToken);
	    IToken char_literal33 = default(IToken);

	    object IF27_tree = default(object);
	    object Modifier28_tree = default(object);
	    object char_literal29_tree = default(object);
	    object ID30_tree = default(object);
	    object char_literal31_tree = default(object);
	    object ID32_tree = default(object);
	    object char_literal33_tree = default(object);
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
	    RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_Modifier=new RewriteRuleITokenStream(adaptor,"token Modifier");
	    RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");

		try { DebugEnterRule(GrammarFileName, "modifier_declaration");
		DebugLocation(61, 73);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:62:2: ( IF Modifier '=' ID ( ',' ID )* ';' -> ^( ModifierDefinition Modifier ( ID )* ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:62:4: IF Modifier '=' ID ( ',' ID )* ';'
			{
			DebugLocation(62, 4);
			IF27=(IToken)Match(input,IF,Follow._IF_in_modifier_declaration310);  
			stream_IF.Add(IF27);

			DebugLocation(62, 7);
			Modifier28=(IToken)Match(input,Modifier,Follow._Modifier_in_modifier_declaration312);  
			stream_Modifier.Add(Modifier28);

			DebugLocation(62, 16);
			char_literal29=(IToken)Match(input,44,Follow._44_in_modifier_declaration314);  
			stream_44.Add(char_literal29);

			DebugLocation(62, 20);
			ID30=(IToken)Match(input,ID,Follow._ID_in_modifier_declaration316);  
			stream_ID.Add(ID30);

			DebugLocation(62, 23);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:62:23: ( ',' ID )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_0 = input.LA(1);

				if ((LA5_0==41))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:62:24: ',' ID
					{
					DebugLocation(62, 24);
					char_literal31=(IToken)Match(input,41,Follow._41_in_modifier_declaration319);  
					stream_41.Add(char_literal31);

					DebugLocation(62, 28);
					ID32=(IToken)Match(input,ID,Follow._ID_in_modifier_declaration321);  
					stream_ID.Add(ID32);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(62, 33);
			char_literal33=(IToken)Match(input,43,Follow._43_in_modifier_declaration325);  
			stream_43.Add(char_literal33);



			{
			// AST REWRITE
			// elements: Modifier, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 62:37: -> ^( ModifierDefinition Modifier ( ID )* )
			{
				DebugLocation(62, 40);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:62:40: ^( ModifierDefinition Modifier ( ID )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(62, 42);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ModifierDefinition, "ModifierDefinition"), root_1);

				DebugLocation(62, 61);
				adaptor.AddChild(root_1, stream_Modifier.NextNode());
				DebugLocation(62, 70);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:62:70: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(62, 70);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier_declaration", 6);
			LeaveRule("modifier_declaration", 6);
			LeaveRule_modifier_declaration();
	    }
	 	DebugLocation(62, 73);
		} finally { DebugExitRule(GrammarFileName, "modifier_declaration"); }
		return retval;

	}
	// $ANTLR end "modifier_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_entity_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_entity_declaration() {}

	// $ANTLR start "entity_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:64:1: entity_declaration : lc= INTERFACE ID block '{' ( declaration )* '}' -> ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* ) ;
	[GrammarRule("entity_declaration")]
	private AstParserRuleReturnScope<object, IToken> entity_declaration()
	{
		EnterRule_entity_declaration();
		EnterRule("entity_declaration", 7);
		TraceIn("entity_declaration", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken lc = default(IToken);
	    IToken ID34 = default(IToken);
	    IToken char_literal36 = default(IToken);
	    IToken char_literal38 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block35 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration37 = default(AstParserRuleReturnScope<object, IToken>);

	    object lc_tree = default(object);
	    object ID34_tree = default(object);
	    object char_literal36_tree = default(object);
	    object char_literal38_tree = default(object);
	    RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");
	    RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
	    RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
	    RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "entity_declaration");
		DebugLocation(64, 58);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:65:2: (lc= INTERFACE ID block '{' ( declaration )* '}' -> ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:65:4: lc= INTERFACE ID block '{' ( declaration )* '}'
			{
			DebugLocation(65, 6);
			lc=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_entity_declaration349);  
			stream_INTERFACE.Add(lc);

			DebugLocation(65, 18);
			ID34=(IToken)Match(input,ID,Follow._ID_in_entity_declaration351);  
			stream_ID.Add(ID34);

			DebugLocation(65, 21);
			PushFollow(Follow._block_in_entity_declaration353);
			block35=block();
			PopFollow();

			stream_block.Add(block35.Tree);
			DebugLocation(65, 27);
			char_literal36=(IToken)Match(input,45,Follow._45_in_entity_declaration355);  
			stream_45.Add(char_literal36);

			DebugLocation(65, 31);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:65:31: ( declaration )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==CLASS||LA6_0==CONST||LA6_0==EXTERN||(LA6_0>=ID && LA6_0<=IF)||LA6_0==INTERFACE||LA6_0==NAMESPACE||LA6_0==USING))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:65:31: declaration
					{
					DebugLocation(65, 31);
					PushFollow(Follow._declaration_in_entity_declaration357);
					declaration37=declaration();
					PopFollow();

					stream_declaration.Add(declaration37.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(65, 44);
			char_literal38=(IToken)Match(input,46,Follow._46_in_entity_declaration360);  
			stream_46.Add(char_literal38);



			{
			// AST REWRITE
			// elements: declaration, ID, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 66:2: -> ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* )
			{
				DebugLocation(66, 5);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:66:5: ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(66, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EntityDefinition, lc, "Block"), root_1);

				DebugLocation(66, 37);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(66, 40);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(66, 46);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:66:46: ( declaration )*
				while ( stream_declaration.HasNext )
				{
					DebugLocation(66, 46);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("entity_declaration", 7);
			LeaveRule("entity_declaration", 7);
			LeaveRule_entity_declaration();
	    }
	 	DebugLocation(66, 58);
		} finally { DebugExitRule(GrammarFileName, "entity_declaration"); }
		return retval;

	}
	// $ANTLR end "entity_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_declaration() {}

	// $ANTLR start "type_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:68:1: type_declaration : ID ( Modifier )? block -> ^( TypeToken ID block ( Modifier )? ) ;
	[GrammarRule("type_declaration")]
	private AstParserRuleReturnScope<object, IToken> type_declaration()
	{
		EnterRule_type_declaration();
		EnterRule("type_declaration", 8);
		TraceIn("type_declaration", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ID39 = default(IToken);
	    IToken Modifier40 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block41 = default(AstParserRuleReturnScope<object, IToken>);

	    object ID39_tree = default(object);
	    object Modifier40_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_Modifier=new RewriteRuleITokenStream(adaptor,"token Modifier");
	    RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "type_declaration");
		DebugLocation(68, 56);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:69:2: ( ID ( Modifier )? block -> ^( TypeToken ID block ( Modifier )? ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:69:4: ID ( Modifier )? block
			{
			DebugLocation(69, 4);
			ID39=(IToken)Match(input,ID,Follow._ID_in_type_declaration386);  
			stream_ID.Add(ID39);

			DebugLocation(69, 7);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:69:7: ( Modifier )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==Modifier))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:69:7: Modifier
				{
				DebugLocation(69, 7);
				Modifier40=(IToken)Match(input,Modifier,Follow._Modifier_in_type_declaration388);  
				stream_Modifier.Add(Modifier40);


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(69, 17);
			PushFollow(Follow._block_in_type_declaration391);
			block41=block();
			PopFollow();

			stream_block.Add(block41.Tree);


			{
			// AST REWRITE
			// elements: Modifier, ID, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 69:23: -> ^( TypeToken ID block ( Modifier )? )
			{
				DebugLocation(69, 26);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:69:26: ^( TypeToken ID block ( Modifier )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(69, 28);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TypeToken, "TypeToken"), root_1);

				DebugLocation(69, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(69, 41);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(69, 47);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:69:47: ( Modifier )?
				if (stream_Modifier.HasNext)
				{
					DebugLocation(69, 47);
					adaptor.AddChild(root_1, stream_Modifier.NextNode());

				}
				stream_Modifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_declaration", 8);
			LeaveRule("type_declaration", 8);
			LeaveRule_type_declaration();
	    }
	 	DebugLocation(69, 56);
		} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
		return retval;

	}
	// $ANTLR end "type_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member() {}

	// $ANTLR start "member"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:71:1: member : ( ID ID -> ^( MemberToken ID ID ) | ID -> ^( FragmentReference ID ) );
	[GrammarRule("member")]
	private AstParserRuleReturnScope<object, IToken> member()
	{
		EnterRule_member();
		EnterRule("member", 9);
		TraceIn("member", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ID42 = default(IToken);
	    IToken ID43 = default(IToken);
	    IToken ID44 = default(IToken);

	    object ID42_tree = default(object);
	    object ID43_tree = default(object);
	    object ID44_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");

		try { DebugEnterRule(GrammarFileName, "member");
		DebugLocation(71, 1);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:72:2: ( ID ID -> ^( MemberToken ID ID ) | ID -> ^( FragmentReference ID ) )
			int alt8=2;
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==ID))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==ID))
				{
					alt8 = 1;
				}
				else if (((LA8_1>=40 && LA8_1<=41)))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:72:4: ID ID
				{
				DebugLocation(72, 4);
				ID42=(IToken)Match(input,ID,Follow._ID_in_member416);  
				stream_ID.Add(ID42);

				DebugLocation(72, 7);
				ID43=(IToken)Match(input,ID,Follow._ID_in_member418);  
				stream_ID.Add(ID43);



				{
				// AST REWRITE
				// elements: ID, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 72:10: -> ^( MemberToken ID ID )
				{
					DebugLocation(72, 13);
					// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:72:13: ^( MemberToken ID ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(72, 15);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MemberToken, "MemberToken"), root_1);

					DebugLocation(72, 27);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(72, 30);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:73:4: ID
				{
				DebugLocation(73, 4);
				ID44=(IToken)Match(input,ID,Follow._ID_in_member433);  
				stream_ID.Add(ID44);



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 73:7: -> ^( FragmentReference ID )
				{
					DebugLocation(73, 10);
					// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:73:10: ^( FragmentReference ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(73, 12);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FragmentReference, "FragmentReference"), root_1);

					DebugLocation(73, 30);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member", 9);
			LeaveRule("member", 9);
			LeaveRule_member();
	    }
	 	DebugLocation(74, 1);
		} finally { DebugExitRule(GrammarFileName, "member"); }
		return retval;

	}
	// $ANTLR end "member"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_block() {}

	// $ANTLR start "block"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:77:1: block : lc= '(' ( member ( ',' member )* )? ')' ( representation )? -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<object, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 10);
		TraceIn("block", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken lc = default(IToken);
	    IToken char_literal46 = default(IToken);
	    IToken char_literal48 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member45 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> member47 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> representation49 = default(AstParserRuleReturnScope<object, IToken>);

	    object lc_tree = default(object);
	    object char_literal46_tree = default(object);
	    object char_literal48_tree = default(object);
	    RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
	    RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
	    RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
	    RewriteRuleSubtreeStream stream_member=new RewriteRuleSubtreeStream(adaptor,"rule member");
	    RewriteRuleSubtreeStream stream_representation=new RewriteRuleSubtreeStream(adaptor,"rule representation");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(77, 4);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:78:5: (lc= '(' ( member ( ',' member )* )? ')' ( representation )? -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:78:9: lc= '(' ( member ( ',' member )* )? ')' ( representation )?
			{
			DebugLocation(78, 11);
			lc=(IToken)Match(input,39,Follow._39_in_block461);  
			stream_39.Add(lc);

			DebugLocation(79, 13);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:79:13: ( member ( ',' member )* )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==ID))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:79:14: member ( ',' member )*
				{
				DebugLocation(79, 14);
				PushFollow(Follow._member_in_block476);
				member45=member();
				PopFollow();

				stream_member.Add(member45.Tree);
				DebugLocation(79, 21);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:79:21: ( ',' member )*
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, decisionCanBacktrack[9]);
					int LA9_0 = input.LA(1);

					if ((LA9_0==41))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch ( alt9 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:79:22: ',' member
						{
						DebugLocation(79, 22);
						char_literal46=(IToken)Match(input,41,Follow._41_in_block479);  
						stream_41.Add(char_literal46);

						DebugLocation(79, 26);
						PushFollow(Follow._member_in_block481);
						member47=member();
						PopFollow();

						stream_member.Add(member47.Tree);

						}
						break;

					default:
						goto loop9;
					}
				}

				loop9:
					;

				} finally { DebugExitSubRule(9); }


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(80, 9);
			char_literal48=(IToken)Match(input,40,Follow._40_in_block495);  
			stream_40.Add(char_literal48);

			DebugLocation(80, 13);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:80:13: ( representation )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==EXPLICIT))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:80:13: representation
				{
				DebugLocation(80, 13);
				PushFollow(Follow._representation_in_block497);
				representation49=representation();
				PopFollow();

				stream_representation.Add(representation49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }



			{
			// AST REWRITE
			// elements: representation, member
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 81:9: -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? )
			{
				DebugLocation(81, 12);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:81:12: ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(81, 14);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BlockToken, lc, "Block"), root_1);

				DebugLocation(81, 38);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:81:38: ( member )*
				while ( stream_member.HasNext )
				{
					DebugLocation(81, 38);
					adaptor.AddChild(root_1, stream_member.NextTree());

				}
				stream_member.Reset();
				DebugLocation(81, 46);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:81:46: ( representation )?
				if (stream_representation.HasNext)
				{
					DebugLocation(81, 46);
					adaptor.AddChild(root_1, stream_representation.NextTree());

				}
				stream_representation.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 10);
			LeaveRule("block", 10);
			LeaveRule_block();
	    }
	 	DebugLocation(82, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_representation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_representation() {}

	// $ANTLR start "representation"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:84:1: representation : EXPLICIT STRING -> ^( StringRepresentationToken STRING ) ;
	[GrammarRule("representation")]
	private AstParserRuleReturnScope<object, IToken> representation()
	{
		EnterRule_representation();
		EnterRule("representation", 11);
		TraceIn("representation", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken EXPLICIT50 = default(IToken);
	    IToken STRING51 = default(IToken);

	    object EXPLICIT50_tree = default(object);
	    object STRING51_tree = default(object);
	    RewriteRuleITokenStream stream_EXPLICIT=new RewriteRuleITokenStream(adaptor,"token EXPLICIT");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "representation");
		DebugLocation(84, 57);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:85:2: ( EXPLICIT STRING -> ^( StringRepresentationToken STRING ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:85:4: EXPLICIT STRING
			{
			DebugLocation(85, 4);
			EXPLICIT50=(IToken)Match(input,EXPLICIT,Follow._EXPLICIT_in_representation541);  
			stream_EXPLICIT.Add(EXPLICIT50);

			DebugLocation(85, 13);
			STRING51=(IToken)Match(input,STRING,Follow._STRING_in_representation543);  
			stream_STRING.Add(STRING51);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 85:20: -> ^( StringRepresentationToken STRING )
			{
				DebugLocation(85, 23);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:85:23: ^( StringRepresentationToken STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(85, 25);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(StringRepresentationToken, "StringRepresentationToken"), root_1);

				DebugLocation(85, 51);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("representation", 11);
			LeaveRule("representation", 11);
			LeaveRule_representation();
	    }
	 	DebugLocation(85, 57);
		} finally { DebugExitRule(GrammarFileName, "representation"); }
		return retval;

	}
	// $ANTLR end "representation"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_extern_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_extern_declaration() {}

	// $ANTLR start "extern_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:87:1: extern_declaration : EXTERN STRING ';' -> ^( ExternToken STRING ) ;
	[GrammarRule("extern_declaration")]
	private AstParserRuleReturnScope<object, IToken> extern_declaration()
	{
		EnterRule_extern_declaration();
		EnterRule("extern_declaration", 12);
		TraceIn("extern_declaration", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken EXTERN52 = default(IToken);
	    IToken STRING53 = default(IToken);
	    IToken char_literal54 = default(IToken);

	    object EXTERN52_tree = default(object);
	    object STRING53_tree = default(object);
	    object char_literal54_tree = default(object);
	    RewriteRuleITokenStream stream_EXTERN=new RewriteRuleITokenStream(adaptor,"token EXTERN");
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "extern_declaration");
		DebugLocation(87, 50);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:88:5: ( EXTERN STRING ';' -> ^( ExternToken STRING ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:88:9: EXTERN STRING ';'
			{
			DebugLocation(88, 9);
			EXTERN52=(IToken)Match(input,EXTERN,Follow._EXTERN_in_extern_declaration566);  
			stream_EXTERN.Add(EXTERN52);

			DebugLocation(88, 16);
			STRING53=(IToken)Match(input,STRING,Follow._STRING_in_extern_declaration568);  
			stream_STRING.Add(STRING53);

			DebugLocation(88, 23);
			char_literal54=(IToken)Match(input,43,Follow._43_in_extern_declaration570);  
			stream_43.Add(char_literal54);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 88:27: -> ^( ExternToken STRING )
			{
				DebugLocation(88, 30);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:88:30: ^( ExternToken STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(88, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ExternToken, "ExternToken"), root_1);

				DebugLocation(88, 44);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_declaration", 12);
			LeaveRule("extern_declaration", 12);
			LeaveRule_extern_declaration();
	    }
	 	DebugLocation(88, 50);
		} finally { DebugExitRule(GrammarFileName, "extern_declaration"); }
		return retval;

	}
	// $ANTLR end "extern_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_template_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_template_declaration() {}

	// $ANTLR start "template_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:90:1: template_declaration : ID '=' STRING ';' -> ^( TemplateToken ID STRING ) ;
	[GrammarRule("template_declaration")]
	private AstParserRuleReturnScope<object, IToken> template_declaration()
	{
		EnterRule_template_declaration();
		EnterRule("template_declaration", 13);
		TraceIn("template_declaration", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ID55 = default(IToken);
	    IToken char_literal56 = default(IToken);
	    IToken STRING57 = default(IToken);
	    IToken char_literal58 = default(IToken);

	    object ID55_tree = default(object);
	    object char_literal56_tree = default(object);
	    object STRING57_tree = default(object);
	    object char_literal58_tree = default(object);
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "template_declaration");
		DebugLocation(90, 55);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:91:5: ( ID '=' STRING ';' -> ^( TemplateToken ID STRING ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:91:9: ID '=' STRING ';'
			{
			DebugLocation(91, 9);
			ID55=(IToken)Match(input,ID,Follow._ID_in_template_declaration592);  
			stream_ID.Add(ID55);

			DebugLocation(91, 12);
			char_literal56=(IToken)Match(input,44,Follow._44_in_template_declaration594);  
			stream_44.Add(char_literal56);

			DebugLocation(91, 16);
			STRING57=(IToken)Match(input,STRING,Follow._STRING_in_template_declaration596);  
			stream_STRING.Add(STRING57);

			DebugLocation(91, 23);
			char_literal58=(IToken)Match(input,43,Follow._43_in_template_declaration598);  
			stream_43.Add(char_literal58);



			{
			// AST REWRITE
			// elements: ID, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 91:27: -> ^( TemplateToken ID STRING )
			{
				DebugLocation(91, 30);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:91:30: ^( TemplateToken ID STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(91, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TemplateToken, "TemplateToken"), root_1);

				DebugLocation(91, 46);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(91, 49);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("template_declaration", 13);
			LeaveRule("template_declaration", 13);
			LeaveRule_template_declaration();
	    }
	 	DebugLocation(91, 55);
		} finally { DebugExitRule(GrammarFileName, "template_declaration"); }
		return retval;

	}
	// $ANTLR end "template_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_class_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_class_declaration() {}

	// $ANTLR start "class_declaration"
	// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:93:1: class_declaration : CLASS ID ';' -> ^( ClassToken ID ) ;
	[GrammarRule("class_declaration")]
	private AstParserRuleReturnScope<object, IToken> class_declaration()
	{
		EnterRule_class_declaration();
		EnterRule("class_declaration", 14);
		TraceIn("class_declaration", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CLASS59 = default(IToken);
	    IToken ID60 = default(IToken);
	    IToken char_literal61 = default(IToken);

	    object CLASS59_tree = default(object);
	    object ID60_tree = default(object);
	    object char_literal61_tree = default(object);
	    RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");

		try { DebugEnterRule(GrammarFileName, "class_declaration");
		DebugLocation(93, 40);
		try
		{
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:94:5: ( CLASS ID ';' -> ^( ClassToken ID ) )
			DebugEnterAlt(1);
			// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:94:9: CLASS ID ';'
			{
			DebugLocation(94, 9);
			CLASS59=(IToken)Match(input,CLASS,Follow._CLASS_in_class_declaration622);  
			stream_CLASS.Add(CLASS59);

			DebugLocation(94, 15);
			ID60=(IToken)Match(input,ID,Follow._ID_in_class_declaration624);  
			stream_ID.Add(ID60);

			DebugLocation(94, 18);
			char_literal61=(IToken)Match(input,43,Follow._43_in_class_declaration626);  
			stream_43.Add(char_literal61);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 94:22: -> ^( ClassToken ID )
			{
				DebugLocation(94, 25);
				// D:\\_Dokumente\\GitHub\\lokad-codedsl\\Source\\MessageContracts.g:94:25: ^( ClassToken ID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(94, 27);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ClassToken, "ClassToken"), root_1);

				DebugLocation(94, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_declaration", 14);
			LeaveRule("class_declaration", 14);
			LeaveRule_class_declaration();
	    }
	 	DebugLocation(94, 40);
		} finally { DebugExitRule(GrammarFileName, "class_declaration"); }
		return retval;

	}
	// $ANTLR end "class_declaration"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declaration_in_program125 = new BitSet(new ulong[]{0x10116020A2UL});
		public static readonly BitSet _modifier_declaration_in_declaration138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _frag_declaration_in_declaration143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_declaration_in_declaration148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _entity_declaration_in_declaration153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_declaration_in_declaration158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_declaration_in_declaration164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _template_declaration_in_declaration169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_declaration_in_declaration174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_declaration179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAMESPACE_in_namespace_declaration193 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_namespace_declaration196 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _42_in_namespace_declaration199 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_namespace_declaration201 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _43_in_namespace_declaration206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_declaration236 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_using_declaration239 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _42_in_using_declaration242 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_using_declaration244 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _43_in_using_declaration249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONST_in_frag_declaration273 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_frag_declaration275 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_frag_declaration277 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_frag_declaration279 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_frag_declaration281 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_frag_declaration283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_modifier_declaration310 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _Modifier_in_modifier_declaration312 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_modifier_declaration314 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_modifier_declaration316 = new BitSet(new ulong[]{0xA0000000000UL});
		public static readonly BitSet _41_in_modifier_declaration319 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_modifier_declaration321 = new BitSet(new ulong[]{0xA0000000000UL});
		public static readonly BitSet _43_in_modifier_declaration325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_in_entity_declaration349 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_entity_declaration351 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _block_in_entity_declaration353 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_entity_declaration355 = new BitSet(new ulong[]{0x4010116020A0UL});
		public static readonly BitSet _declaration_in_entity_declaration357 = new BitSet(new ulong[]{0x4010116020A0UL});
		public static readonly BitSet _46_in_entity_declaration360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_type_declaration386 = new BitSet(new ulong[]{0x8004000000UL});
		public static readonly BitSet _Modifier_in_type_declaration388 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _block_in_type_declaration391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_member416 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_member418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_member433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_block461 = new BitSet(new ulong[]{0x10000200000UL});
		public static readonly BitSet _member_in_block476 = new BitSet(new ulong[]{0x30000000000UL});
		public static readonly BitSet _41_in_block479 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _member_in_block481 = new BitSet(new ulong[]{0x30000000000UL});
		public static readonly BitSet _40_in_block495 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _representation_in_block497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPLICIT_in_representation541 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _STRING_in_representation543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTERN_in_extern_declaration566 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _STRING_in_extern_declaration568 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_extern_declaration570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_template_declaration592 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_template_declaration594 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _STRING_in_template_declaration596 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_template_declaration598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_class_declaration622 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_class_declaration624 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_class_declaration626 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  MessageContracts 
