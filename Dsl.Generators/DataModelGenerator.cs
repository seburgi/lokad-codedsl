using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using Dapper;
using Lokad.CodeDsl;
using Context = Lokad.CodeDsl.Context;

namespace Dsl.Generators
{
    public sealed class DataModelGenerator : IGenerator
    {
        public string ClassNameTemplate { get; set; }
        public string MemberTemplate { get; set; }
        
        public string Region { get; set; }
        public string GenerateInterfaceForEntityWithModifiers { get; set; }
        public string TemplateForInterfaceName { get; set; }
        public string TemplateForInterfaceMember { get; set; }
        public DataModelGenerator()
        {
            Region = "Generated by Lokad Code DSL";
            ClassNameTemplate = @"
[DataContract(Namespace = {1})]
public partial class {0}";


            MemberTemplate = "[DataMember(Order = {0})] public {1} {2} {{ get; private set; }}";

            TemplateForInterfaceName = "public interface I{0}";
            TemplateForInterfaceMember = "void When({0} {1});";
            GenerateInterfaceForEntityWithModifiers = "none";
        }

        public void Generate(Context context, IndentedTextWriter outer)
        {
            // Apply templates
            foreach (var template in context.Templates)
            {
                if(String.IsNullOrWhiteSpace(template.Key) || String.IsNullOrWhiteSpace(template.Value)) continue;

                var propertyInfo = GetType().GetProperty(template.Key);
                if(propertyInfo == null) continue;

                try
                {
                    propertyInfo.SetValue(this, template.Value, null);
                }
                catch (Exception)
                {
                    Console.WriteLine("Error when setting value for template '{0}", template.Key);
                }
            }

            var writer = new CodeWriter(outer);
            
            foreach (var source in context.Using.Distinct().OrderBy(s => s))
            {
                writer.WriteLine("using {0};", source);
            }

            writer.WriteLine(@"
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local");


            writer.WriteLine("namespace {0}", context.CurrentNamespace);
            writer.WriteLine("{");

            writer.Indent += 1;

            if (!string.IsNullOrEmpty(Region))
            {
                writer.WriteLine("#region {0}", Region);
            }

            WriteContext(writer, context);


            if (!string.IsNullOrEmpty(Region))
            {
                writer.WriteLine("#endregion");
            }

            writer.Indent -= 1;
            writer.WriteLine("}");
        }

        private Dictionary<string, string> _typeMap = new Dictionary<string, string>
                                                          {
                                                              {"int", "int"},
                                                              {"nvarchar", "string"},
                                                              {"uniqueidentifier", "Guid"},
                                                              {"datetime", "DateTime"},
                                                              {"datetime2", "DateTime"},
                                                              {"float", "double"}
                                                          };

        private void WriteContext(CodeWriter writer, Context context)
        {
            using (var con = new SqlConnection(context.Templates["ConnectionString"]))
            {
                con.Open();

                foreach (var schema in context.Templates["Schemas"].Split(','))
                {
                    //var tableNames = con.Query<string>("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA LIKE @schema", new {schema}).ToList();
                    var columns = con.Query("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = @schema ORDER BY TABLE_NAME, ORDINAL_POSITION", new { schema }).ToList();

                    foreach (var tableColumns in columns.GroupBy(x => x.TABLE_NAME))
                    {
                        if (tableColumns.Key == "sysdiagrams") continue;

                        var message = new Message(tableColumns.Key, new List<Modifier>());
                        context.Entities.First().Messages.Add(message);
                        
                        foreach (var tableColumn in tableColumns)
                        {
                            if (tableColumn.COLUMN_NAME == "IvspVon" || tableColumn.COLUMN_NAME == "IvspBis") continue;

                            string type = _typeMap[tableColumn.DATA_TYPE];

                            if (tableColumn.IS_NULLABLE == "YES" && type != "string")
                            {
                                type += "?";
                            }
                            
                            message.Members.Add(new Member(type, tableColumn.COLUMN_NAME, "xy", Member.Kinds.Field));
                        }
                    }
                }
            }



            foreach (var entity in context.Entities)
            {
                foreach (var message in entity.Messages)
                {
                    writer.Write(ClassNameTemplate, message.Name, context.CurrentExtern);
                    if (entity.Name != "default")
                    {
                        writer.Write(" : {0}", entity.Name);
                    }

                    writer.WriteLine();

                    writer.WriteLine("{");
                    writer.Indent += 1;

                    if (message.Members.Count > 0)
                    {
                        WriteMembers(message, writer);

                        writer.WriteLine();
                        //WritePrivateCtor(writer, message);

                        writer.WriteLine("public {0} () {{}}", message.Name);
                        writer.Write("public {0} (", message.Name);

                        if (entity.FixedMembers.Any())
                        {
                            WriteParameters(entity.FixedMembers, writer);
                            writer.Write(", ", message.Name);
                        }

                        WriteParameters(message.Members, writer);
                        writer.WriteLine(")");

                        if (entity.FixedMembers.Any())
                        {
                            writer.Indent += 1;
                            writer.Write(" : base(");
                            writer.Write(String.Join(", ", entity.FixedMembers.Select(x => x.Name)));
                            writer.WriteLine(")");
                            writer.Indent -= 1;
                        }

                        writer.WriteLine("{");


                        writer.Indent += 1;
                        WriteAssignments(message, writer);
                        writer.Indent -= 1;

                        writer.WriteLine("}");

                    }
                    //WriteEquals(writer, message);
                    WriteToString(writer, message);
                    writer.Indent -= 1;
                    writer.WriteLine("}");

                }
            }
        }

        private void WriteEquals(CodeWriter writer, Message message)
        {
            writer.WriteLine();
            writer.WriteLine("public bool Equals({0} other)", message.Name);
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine("return " + String.Join(" && ", message.Members.Select(x => GeneratorUtil.MemberCase(x.Name) + " == other." + GeneratorUtil.MemberCase(x.Name))) + ";");
            writer.Indent--;
            writer.WriteLine("}");

            writer.WriteLine();
            writer.Write("public bool Equals(");
            WriteParameters(message.Members, writer);
            writer.WriteLine(")");
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine("return " + String.Join(" && ", message.Members.Select(x => GeneratorUtil.MemberCase(x.Name) + " == " + GeneratorUtil.ParameterCase(x.Name))) + ";");
            writer.Indent--;
            writer.WriteLine("}");
        }

        static void WritePrivateCtor(CodeWriter writer, Message contract)
        {
            var arrays = contract.Members.Where(p => p.Type.EndsWith("[]")).ToArray();
            if (!arrays.Any())
            {
                writer.WriteLine(@"{0} () {{}}", contract.Name);
            }
            else
            {
                writer.WriteLine(@"{0} () 
{{", contract.Name);
                writer.Indent += 1;
                foreach (var array in arrays)
                {
                    writer.WriteLine("{0} = new {1};",
                        GeneratorUtil.MemberCase(array.Name),
                        array.Type.Replace("[]", "[0]")
                        );
                }
                writer.Indent -= 1;
                writer.WriteLine("}");
            }
        }

        static void WriteToString(CodeWriter writer, Message contract)
        {
            if (string.IsNullOrWhiteSpace(contract.StringRepresentation))
                return;

            writer.WriteLine();
            writer.WriteLine("public override string ToString()");
            writer.WriteLine("{");
            writer.Indent += 1;

            var text = contract.StringRepresentation;
            var active = new List<string>();
            foreach (var member in contract.Members)
            {
                text = ReplaceAdd(text, "{" + member.DslName + ":", "{" + active.Count + ":", active, member);
                text = ReplaceAdd(text, "{" + member.DslName + "}", "{" + active.Count + "}", active, member);
                

                if (member.DslName != member.Name)
                {
                    text = ReplaceAdd(text, "{" + member.Name + ":", "{" + active.Count + ":", active, member);
                    text = ReplaceAdd(text, "{" + member.Name + "}", "{" + active.Count + "}", active, member);
                }
            }

            writer.Write("return string.Format(@{0}", text);

            foreach (var variable in active)
            {
                writer.Write(", " + GeneratorUtil.MemberCase(variable));
            }
            writer.WriteLine(");");
            writer.Indent -= 1;
            writer.WriteLine("}");
        }

        static string ReplaceAdd(string text, string v1, string to1, List<string> active, Member member)
        {
            if (text.IndexOf(v1, StringComparison.InvariantCultureIgnoreCase) >= 0)
            {
                text = ReplaceString(text, v1, to1);
                active.Add(member.Name);
            }
            return text;
        }

        static public string ReplaceString(string str, string oldValue, string newValue)
        {
            var comparison = StringComparison.InvariantCultureIgnoreCase;
            StringBuilder sb = new StringBuilder();

            int previousIndex = 0;
            int index = str.IndexOf(oldValue, comparison);
            while (index != -1)
            {
                sb.Append(str.Substring(previousIndex, index - previousIndex));
                sb.Append(newValue);
                index += oldValue.Length;

                previousIndex = index;
                index = str.IndexOf(oldValue, index, comparison);
            }
            sb.Append(str.Substring(previousIndex));

            return sb.ToString();
        }

        void GenerateEntityInterface(Entity entity, CodeWriter writer, string member, string template)
        {
            var ms = member.Split(',');
            var matches = entity.Messages.Where(m => m.Modifiers.Select(s => s.Identifier).Intersect(ms).Any()).ToList();
            if (matches.Any())
            {
                writer.WriteLine();
                writer.WriteLine(template, entity.Name);
                writer.WriteLine("{");
                writer.Indent += 1;
                foreach (var contract in matches)
                {
                    writer.WriteLine(TemplateForInterfaceMember, contract.Name, member == "!" ? "e" : "c");
                }
                writer.Indent -= 1;
                writer.WriteLine("}");
            }
        }



        void WriteMembers(Message message, CodeWriter writer)
        {
            var idx = 1;
            foreach (var member in message.Members)
            {
                writer.WriteLine(MemberTemplate, idx, member.Type, GeneratorUtil.MemberCase(member.Name));


                idx += 1;
            }
        }
        void WriteParameters(List<Member> members, CodeWriter writer)
        {
            var first = true;
            foreach (var member in members)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    writer.Write(", ");
                }
                writer.Write("{0} {1}", member.Type, GeneratorUtil.ParameterCase(member.Name));
            }
        }

        void WriteAssignments(Message message, CodeWriter writer)
        {
            foreach (var member in message.Members)
            {
                writer.WriteLine("{0} = {1};", GeneratorUtil.MemberCase(member.Name), GeneratorUtil.ParameterCase(member.Name));
            }
        }
    }
}